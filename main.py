import csv
import glob
from collections import Counter

from androguard.misc import AnalyzeAPK


def get_superclasses(analysis, class_analysis):
    """
    Returns names of classes inherited by the given class.

    Class name looks like Ljava/lang/Object;

    :param analysis: androguard.core.analysis.analysis.Analysis
    :param class_analysis: androguard.core.analysis.analysis.ClassAnalysis
    :return: a list of class names
    """
    superclasses = []
    while class_analysis is not None and class_analysis.name != "Ljava/lang/Object;":
        superclasses.append(str(class_analysis.name))
        class_analysis = analysis.get_class_analysis(class_analysis.extends)
    return superclasses[1:]


def extract_apis(file):
    """
    Extracts methods of classes that are from android.telecom or android.telephony packages or
    inherit android.content.BroadcastReceiver or classes from those packages.

    Output is a CSV file and written to results directory.
    Output has the following columns: class name, superclass names, method name, method descriptor

    :param file: path to APK file
    """
    with open("results/" + ".".join(file.split("/")[-1].split(".")[:-1]) + ".csv", "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        _, _, analysis = AnalyzeAPK(file)
        for class_analysis in analysis.get_classes():
            if class_analysis.name.startswith("Landroid/tele"):
                for method_analysis in class_analysis.get_methods():
                    writer.writerow([method_analysis.class_name, "", method_analysis.name, method_analysis.descriptor])
            if class_analysis.is_external():
                continue
            superclasses = get_superclasses(analysis, class_analysis)
            if any([superclass.startswith("Landroid/tele") or superclass == "Landroid/content/BroadcastReceiver;" for superclass in superclasses]):
                for method_analysis in class_analysis.get_methods():
                    writer.writerow([method_analysis.class_name, "".join(superclasses), method_analysis.name, method_analysis.descriptor])


def analyze_apis(apk_file, entry_points_file):
    """
    Traverses call graphs from the given entry points and extracts Android APIs.

    Entry points file is a CSV file and needs following columns: class name, method name, method descriptor.

    Output is a CSV file and written to results directory.
    Output has the following columns: class name, method name, method descriptor

    :param apk_file: path to APK file
    :param entry_points_file: path to CSV file containing entry points
    """
    entry_points = []
    with open(entry_points_file, newline="") as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            entry_points.append(row)
    _, _, analysis = AnalyzeAPK(apk_file)
    counter = Counter()
    for entry_point in entry_points:
        method_analysis = analysis.get_method_analysis_by_name(entry_point[0], entry_point[1], entry_point[2])
        if method_analysis is None:
            print("Method " + " ".join(entry_point) + " was not found")
            continue
        stack = [method_analysis]
        visited = set()
        while len(stack) > 0:
            current = stack.pop()
            key = (current.class_name, current.name, current.descriptor)
            if key not in visited:
                if current.class_name.startswith("Landroid/"):
                    counter[key] += 1
                visited.add(key)
            for _, method_analysis, _ in current.get_xref_to():
                if (method_analysis.class_name, method_analysis.name, method_analysis.descriptor) not in visited:
                    stack.append(method_analysis)
    with open("results/" + ".".join(apk_file.split("/")[-1].split(".")[:-1]) + "_analysis.csv", "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        for key in counter:
            writer.writerow(key)


def analyze_results():
    """
    Combines APIs from CSV files generated by analyze_apis and sorts them by frequency.

    Output is a CSV file and written to results directory.
    Output has the following columns: class name, method name, method descriptor, frequency
    """
    counter = Counter()
    for file in glob.glob("results/*_analysis.csv"):
        with open(file, newline="") as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                counter[tuple(row)] += 1
    with open("results/analysis.csv", "w", newline="") as csvfile:
        writer = csv.writer(csvfile)
        for key, value in counter.most_common():
            writer.writerow(list(key) + [value])
